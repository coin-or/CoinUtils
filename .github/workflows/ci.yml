---
name: Compile and test
on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - '*'
  workflow_dispatch:
  release:
    types:
      - created

jobs:
  test:
    name: Run tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-16.04, ubuntu-18.04, ubuntu-20.04]
        build_static: [true, false]
        flags: [ADD_CXXFLAGS=-fvisibility=hidden]
        download_requirements: [sudo apt install -y -qq gfortran liblapack-dev libmetis-dev libnauty2-dev]
        include:
          - os: macos-10.15
            build_static: false
            flags: CC=clang OSX=10.15
            download_requirements: brew install metis bash
          - os: macos-10.15
            build_static: false
            flags: CC=gcc-9 CXX=g++-9 OSX=10.15
            download_requirements: brew install metis bash
          - os: macos-10.15
            build_static: false
            flags: CC=gcc-10 CXX=g++-10 OSX=10.15
            download_requirements: brew install metis bash
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          path: ${{ github.event.repository.name }}
      - name: Checkout coinbrew
        uses: actions/checkout@v2
        with:
          repository: coin-or/coinbrew
          path: coinbrew
      - name: Install required packages from package manager
        run: ${{ matrix.download_requirements }}
      - name: Fetch dependencies
        run: |
          bash coinbrew/.ci/install_packages.sh
          bash coinbrew/coinbrew fetch ${{ github.event.repository.name }} \
          --no-prompt --skip-update \
          --skip='ThirdParty/Metis ThirdParty/Mumps ThirdParty/Blas ThirdParty/Lapack'
      - name: Build project
        run: |
          export ${{ matrix.flags }}
          source coinbrew/.ci/setup_environment.sh
          bash coinbrew/coinbrew build ${{ github.event.repository.name }} \
          --skip='ThirdParty/Metis ThirdParty/Mumps ThirdParty/Blas ThirdParty/Lapack' \
          "${COMMON_ARGS[@]}" "${ADD_ARGS[@]}" "${DBG_ARGS[@]}" \
          ADD_CXXFLAGS="${ADD_CXXFLAGS}" CC=${CC} CXX=${CXX}
          echo "cc=${CC}" >> $GITHUB_ENV
        env:
          BUILD_STATIC: ${{ matrix.build_static }}
          DEBUG: false
          ASAN: false
      - name: Archive dist contents
        run: |
          cp ${{ github.event.repository.name }}/README.md dist/
          cp ${{ github.event.repository.name }}/LICENSE dist/
          tar -czvf release.tar.gz -C dist .
      - name: Upload Artifact
        if: ${{ github.event_name != 'release'}}
        uses: actions/upload-artifact@v2
        with:
          name: release.tar.gz
          path: release.tar.gz
          if-no-files-found: error
      - name: Construct package name
        if: ${{ github.event_name == 'release'}}
        run: |
          [${{ matrix.build_static }}] && static="static-" || static="-"
          name=${{ github.event.repository.name }}-${{ github.event.release.tag_name }}-${{ matrix.os }}-$static${{ env.cc }}
          echo "package_name=${name}" >> $GITHUB_ENV
      - name: Upload package to release
        if: ${{ github.event_name == 'release'}}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release.tar.gz
          asset_name: ${{ env.package_name }}.tar.gz
          asset_content_type: application/gzip
