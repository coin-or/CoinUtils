---
name: Windows build and test
on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - '*'
  release:

jobs:
  test:
    name: Run tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019]
        arch: [x86_64, i686]
        tests: [none, main]
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          path: ${{ github.event.repository.name }}
      - name: Install required packages
        run: ${{ matrix.install_dependencies }}
      - name: Fetch Data-Sample repository
        uses: actions/checkout@v2
        with:
          repository: coin-or-tools/Data-Sample
          path: Data/Sample
      - name: Fetch ThirdParty-Glpk repository
        uses: actions/checkout@v2
        with:
          repository: coin-or-tools/ThirdParty-Glpk
          path: ThirdParty/Glpk
      - name: Checkout coinbrew
        uses: actions/checkout@v2
        with:
          repository: coin-or/coinbrew
          path: coinbrew
      - name: Set correct host flag and install requirements for i686/x86_64
        run: |
          echo "host_flag=--host=${{ matrix.arch }}-w64-mingw32" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          C:\msys64\usr\bin\pacman -S mingw-w64-${{ matrix.arch }}-lapack mingw-w64-${{ matrix.arch }}-winpthreads-git mingw-w64-${{ matrix.arch }}-readline mingw-w64-${{ matrix.arch }}-suitesparse mingw-w64-${{ matrix.arch }}-metis --noconfirm
      - name: Set up msys for 32-bit builds
        if: ${{ matrix.arch == 'i686' }}
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            base-devel
            git
          path-type: inherit
          msystem: MINGW32
      - name: Set up msys for 64-bit builds
        if: ${{ matrix.arch != 'i686' }}
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            base-devel
            git
          path-type: inherit
          msystem: MINGW64
      - name: Build project
        run: |
          [[ ${{ matrix.tests }} == "none" ]] && debug="--enable-debug" || debug=""
          ./coinbrew/coinbrew build ${{ github.event.repository.name }} --no-prompt --skip='ThirdParty/Metis ThirdParty/Mumps' --build=x86_64-w64-mingw32 ${{ env.host_flag }} $debug --verbosity 4 --tests ${{ matrix.tests }} --enable-relocatable
          cp ${{ github.event.repository.name }}/README.md dist/
          cp ${{ github.event.repository.name }}/LICENSE dist/
          tar -czvf release.tar.gz -C dist .
        shell: msys2 {0}
      - name: Upload failed build directory
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-tests=${{ matrix.tests }}-failedbuild
          path: build/
      - name: Checkout package name generation script
        uses: actions/checkout@v2
        with:
          repository: coin-or-tools/platform-analysis-tools
          path: tools
          ref: 0.0.1
      - name: Retrieve platform info
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install -r tools/requirements.txt
          platform_str=`python3 tools/hsf_get_platform.py`
          echo "platform_string=${platform_str}" >> $GITHUB_ENV
        shell: msys2 {0}
      - name: Upload artifact
        if: ${{ github.event_name == 'pull_request'}}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-${{ github.head_ref }}-${{ env.platform_string }}.tar.gz
          path: release.tar.gz
          if-no-files-found: error
      - name: Upload package to release
        if: ${{ github.event_name == 'release'}}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release.tar.gz
          asset_name: ${{ github.event.repository.name }}-${{ github.event.release.tag_name }}-${{ env.platform_string }}.tar.gz
          asset_content_type: application/gzip
